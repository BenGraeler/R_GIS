{
    "contents" : "#' Developing a script that enables a tool to run the ordinary kriging\n#'\n#' This script function builds an interpolated result without taking into account of the covariates\n#' and provide a kriged plot upon being run with the corresponding ArcGIS script tool.\n#'\n#'\\code{tool_exec}\n#' @param in_params - input parameters\n#' @param out_params - output parameters\n#' @param input_feature -  Input point feature containing fields of the dependant variable and all explanatory variables.\n#' @param predict_location -  Input point feature representing locations where you would like to predict the probable values for the presence of dependant variable. These point feature must have certain explanatory variables stored as fields.\n#' @param dep_variable - Field from the input feature containing the sampled attributes. A particular value gives the strength of the field element at that point.\n#' @param log_var - Taking logarithmic values for the dependent variable.\n#' @param partial_sill - (Partial) Sill of the variogram model component.\n#' @param modl - Model type, e.g. \"Exp\", \"Sph\", \"Gau\", \"Mat\".\n#' @param rang - Range of the variogram model component.\n#' @param nugt - Nugget component of the variogram. (this basically adds a nugget compontent to the model)\n#' @return output_feature1 - Output krige shapefile that contains the predictions of the values of unsampled locations from the Prediction_location dataset.\n#' @return output_feature2 - Output variance provides how far the values are deviated from the other and the mean and exports the output as a pdf file.\n#' @author Shankarlingam Sundaresan\n#' @details This script function interpolates the values that are modeled by a Gaussian process governed by prior covariance,\n#' as opposed to a piecewiseâ€“polynomial spline chosen to optimize smoothness of the fitted values.\n#' it is particularly associated with linear unbiased estimation, as the estimations are weighed linear combination of available data.\n#' It does not take into account of the covariates\n#' i.e. it assumes constant unknown mean and helps in minimizing error variance.\n#' @export\n#'\n\n\n\n# Ordinary kriging\n# Initializing binding tool function\ntool_exec <- function(in_params, out_params)\n{\n  # loading packages\n\n\n\n  if (!requireNamespace(\"sp\", quietly = T))\n    install.packages(\"sp\")\n  if (!requireNamespace(\"gstat\",quietly = T))\n    install.packages(\"gstat\")\n  if (!requireNamespace(\"raster\",quietly = T))\n    install.packages(\"raster\")\n\n\n  require(sp)\n  require(gstat)\n  require(raster)\n\n  # defining variables\n  input_feature = in_params[[1]]\n  predict_location = in_params[[2]]\n  partial_sill = in_params[[5]]\n  modl = in_params[[6]]\n  rang = in_params[[7]]\n  nugt = in_params[[8]]\n  dep_variable = in_params[[3]]\n  output_feature1 = out_params[[1]]\n  output_feature2 = out_params[[2]]\n  log_var = in_params[[4]]\n\n  #exporting datasets\n  d = arc.open(input_feature)\n  dat = arc.select(d, names(d@fields))\n  dat.2 = arc.data2sp(dat)\n\n  #creating model formula\n  message(\"Creating model formula\")\n\n  if (log_var == FALSE)\n  {\n    model_kr = paste(dep_variable, \"~1\")\n    message(\"formula =\",model_kr)\n  }\n  else\n  {\n    model_kr = paste(paste (\"log(\",dep_variable,\")\"),paste(\"~1\"))\n    message(\"formula = log(\",dep_variable,\")~1\")\n  }\n  model_kr.f = as.formula(model_kr)\n\n  #creating variogram\n  message(\"computing sample variogram...\")\n  out_varianc = variogram(model_kr.f,dat.2)\n\n  message(\"fitting variogram model...\")\n\n  #fitting the model\n  vario.fit = fit.variogram(out_varianc, vgm(partial_sill, modl, rang, nugt))\n  print(vario.fit)\n\n\n  message(\"Predicting...\")\n  d.loc = arc.open(predict_location)\n  data.loc = arc.select(d.loc,names(d.loc@fields))\n  data.loc.1 =  arc.data2sp(data.loc)\n  gridded(data.loc.1)=T\n\n  #### Write Output ####\n\n  message(\"....kriging now....\")\n  out_krig = krige(model_kr.f,dat.2, data.loc.1, vario.fit)\n\n  gridded(out_krig)=T\n  out_krig1 = out_krig[1]\n\n  gridded(out_krig)=F\n  out_krig2 = out_krig[2]\n\n  message(\"...writing output...\")\n  arc.write(output_feature1,out_krig1, shape_info = d@shapeinfo)\n\n  if (!is.null(output_feature2))\n  {\n    pdf(output_feature2)\n    print(plot(out_varianc,vario.fit,main = \"Variogram with fitted Model\",cex.main = 1.25))\n    gridded(out_krig)=TRUE\n    print(spplot(out_krig))\n    gridded(out_krig1)=T\n    gridded(out_krig2)=T\n    KrigRaster = raster(out_krig1)\n    VarRaster = raster(out_krig2)\n    plot(KrigRaster,main = \"Interpolation Raster Plot\",cex.main = 1.5)\n    plot(VarRaster,main = \"Variance Raster Plot\", cex.main =  1.5)\n    dev.off()\n  }\n  message(\"...done...almost...\")\n  return(out_params)\n}\n",
    "created" : 1457365497098.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "554845366",
    "id" : "4FAB7EB6",
    "lastKnownWriteTime" : 1457961273,
    "path" : "D:/Back_up_shankar/R-programng/San-package/San-package/Arc.krige/R/Ordinary_krige.R",
    "project_path" : "R/Ordinary_krige.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}